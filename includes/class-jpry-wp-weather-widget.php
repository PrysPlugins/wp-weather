<?php

/**
 * A class for handling our custom weather widget.
 */
class JPry_WP_Weather_Widget extends WP_Widget {

	/**
	 * Constructor.
	 *
	 * @since 0.1.0
	 */
	public function __construct() {
		parent::__construct(
			'wp_weather_widget',
			__( 'WP Weather Widget', 'wp-weather' ),
			array(
				'description' => __( 'Weather from the Forecast.IO service', 'wp-weather' ),
			)
		);
	}

	/**
	 * Output the widget.
	 *
	 * @param array $args
	 * @param array $instance
	 */
	public function widget( $args, $instance ) {

		$args = wp_parse_args( $args, array(
			'height' => 245,
			'width'  => '100%',
			'lat'    => '40.0161',
			'lon'    => '-75.7183',
			'name'   => 'Forecast',
			'units'  => 'us',
			'color'  => null,

		) );

		// Store the height and width to separate variables
		$height = $args['height'];
		$width  = $args['width'];
		unset( $args['height'], $args['width'] );

		// Build the pieces of the URL
		$pieces = array();
		foreach ( $args as $key => $value ) {
			if ( empty( $value ) ) {
				continue;
			}

			$pieces[] = "{$key}={$value}";
		}

		$url = 'http://forecast.io/embed/#' . join( '&', $pieces );

		?>
		<iframe id="wp_weather_widget_<?php echo $instance['ID']; ?>"
		        type="text/html"
		        frameborder="0"
		        height="<?php echo $height; ?>"
		        width="<?php echo $width; ?>"
		        src="<?php echo $url; ?>">
		</iframe>
		<?php
	}

	public function update( $new_instance, $old_instance ) {
		return parent::update( $new_instance, $old_instance ); // TODO: Change the autogenerated stub
	}

	public function form( $instance ) {

	}
}
